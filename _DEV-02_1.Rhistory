ptsCol = 24
if (year < 2015)
{
ptsCol = 22
}
kPtsCol = ptsCol - 12
dPtsCol = ptsCol - 10
QB = data.frame(myscore[4,1],myscore[4,2], myscore[4,ptsCol])
RB1 = data.frame(myscore[5,1],myscore[5,2], myscore[5,ptsCol])
RB2 = data.frame(myscore[6,1],myscore[6,2], myscore[6,ptsCol])
WR1 = data.frame(myscore[7,1],myscore[7,2], myscore[7,ptsCol])
WR2 = data.frame(myscore[8,1],myscore[8,2], myscore[8,ptsCol])
TE  = data.frame(myscore[9,1],myscore[9,2], myscore[9,ptsCol])
FLEX  = data.frame(myscore[10,1],myscore[10,2], myscore[10,ptsCol])
K = data.frame(kscore[3,1],kscore[3,2],kscore[3,kPtsCol])
DEF = data.frame(dscore[3,1], gsub("\\sD/ST\\sD/ST","",dscore[3,2]),dscore[3,dPtsCol])
IR = subset(bench, bench$V1 == "IR")
bench=subset(bench, bench$V1 == "Bench")
BN = data.frame(Pos = character(), Player = character(), Pts = character(), Bye = integer(), stringsAsFactors = FALSE)
if (year > 2014)
{
for (k in 1:nrow(bench))
{
BN = rbind(BN,data.frame(Pos = "BN",Player = as.character(bench[k,2]),Pts = as.character(bench[k,ptsCol]), stringsAsFactors = FALSE))
}
if (tables[[6]][1,1] == "BENCH: KICKERS")
{
KBench = tables[[6]]
KBench = subset(KBench, KBench$V1 == "Bench")
if (nrow(KBench) > 0)
{
for (k in 1:nrow(KBench))
{
BN = rbind(BN, data.frame(Pos = "BN", Player = KBench[k,2], Pts = ifelse(is.na(KBench[k,kPtsCol]),0,as.character(KBench[k,kPtsCol])), stringsAsFactors = FALSE))
}
}
DefBench = tables[[7]]
DefBench = subset(DefBench, DefBench$V1 == "Bench")
if (nrow(DefBench) > 0)
{
for (k in 1:nrow(DefBench))
{
BN = rbind(BN,data.frame(Pos = "BN",Player = gsub("\\sD/ST\\sD/ST","",DefBench[k,2]), Pts = ifelse(is.na(DefBench[k,dPtsCol]),0,as.character(DefBench[k,dPtsCol]))))
}
}
}else {
KBench = NULL
DefBench = tables[[6]]
DefBench = subset(DefBench, DefBench$V1 == "Bench")
if (nrow(DefBench) > 0)
{
for (k in 1:nrow(DefBench))
{
BN = rbind(BN,data.frame(Pos = "BN",Player = gsub("\\sD/ST\\sD/ST","",DefBench[k,2]), Pts = ifelse(is.na(DefBench[k,14]),0,DefBench[k,14])))
}
}
}
}
if (!is.na(IR[1,2]))
{
IR = data.frame(Pos = "IR",Player = IR[1,2],Pts = IR[1,ptsCol - 1])
} else {
IR = NULL;
}
colnames(QB)= c("Pos","Player","Pts")
colnames(RB1)= c("Pos","Player","Pts")
colnames(RB2)= c("Pos","Player","Pts")
colnames(WR1)= c("Pos","Player","Pts")
colnames(WR2)= c("Pos","Player","Pts")
colnames(TE)= c("Pos","Player","Pts")
colnames(FLEX)= c("Pos","Player","Pts")
colnames(K)=c("Pos","Player","Pts")
colnames(DEF)= c("Pos","Player","Pts")
#colnames(IR)= c("Pos","Player","Pts")
lines = rbind(QB,RB1,RB2,WR1,WR2,TE,FLEX,K,DEF,BN,IR)
lines$Player = gsub("([^a-zA-Z0-9\\s\\.,'/])"," ",lines$Player)
lines$Pts = as.numeric(as.character(lines$Pts))
lines$Bye = 0
if (nrow(lines[is.na(lines$Pts),]) > 0)
{
lines[is.na(lines$Pts),]$Bye = 1
lines[is.na(lines$Pts),]$Pts = 0
}
lines$week = j
lines$team = i
if (year == 2015)
{
if ((tables[[6]][1,1] == "BENCH: TEAM D/ST") | (tables[[6]][1,1] == "BENCH: KICKERS"))
{
lines$Opponent = gsub(" Box Score","",tables[[7]][1,1])
}else {
lines$Opponent = gsub(" Box Score","",tables[[6]][1,1])
}
}
else
{
if ((tables[[5]][1,1] == "BENCH: TEAM D/ST") | (tables[[5]][1,1] == "BENCH: KICKERS"))
{
lines$Opponent = gsub(" Box Score","",tables[[6]][1,1])
}else {
lines$Opponent = gsub(" Box Score","",tables[[5]][1,1])
}
}
allLines = rbind(allLines, lines)
}
}
db = allLines
allLines$Player = gsub("\\s*$","",allLines$Player)
allLines$Player = gsub("Ã,Â","",allLines$Player)
allLines$Player = gsub("Ã,Â","",allLines$Player)
allLines$OppId = match(allLines$Opponent,teams$team)
allLines$Player = gsub("\\sD/ST","",allLines$Player)
allLines$NFLTeam = gsub("(.*), *(.*)","\\2",allLines$Player)
allLines$Player = gsub("(.*), *(.*)","\\1",allLines$Player)
allLines$Player = gsub("\\*$","",allLines$Player)
allLines$Player = gsub("\\s*$","",allLines$Player)
allLines$NFLTeam = gsub("\\s*(([QPDO])|(SSPD))$","",allLines$NFLTeam)
allLines$NFLPos = gsub("\\s+IR$","",allLines$NFLTeam)
allLines$NFLPos = gsub("^(.*)\\s+(.*)$","\\2",allLines$NFLPos)
allLines$NFLTeam = gsub("^(.*)\\s+(.*)$","\\1",allLines$NFLTeam)
allLines$NFLTeam = gsub("\\s*$","",allLines$NFLTeam)
allLines[!is.na(match(allLines$NFLTeam, nfltms$TeamName)),]$NFLPos = "D/ST"
allLines[!is.na(match(allLines$NFLTeam, nfltms$TeamName)),]$NFLTeam = as.character(nfltms[match(allLines[!is.na(match(allLines$NFLTeam,nfltms$TeamName)),]$NFLTeam,nfltms$TeamName),]$ID)
if (startFresh == FALSE)
{
prevAllLines$X = NULL
allLines = rbind(prevAllLines, allLines)
}
#allLines$Opponent = NULL
write.csv(allLines, file="allLines.csv")
# now operate on pageSrc using for example library(XML) etc
# readHTMLTable(pageSrc) # for example
remDr$close()
remDr$closeServer()
setwd("C:/Users/Charles.Willwerth/OneDrive for Business/GitHubChuckWillwerth/ESPNFFLScraper")
allLines = read.csv("allLines.csv")
teams = read.csv("fteams.csv")
library(sqldf)
nTeams = max(allLines$team, na.rm = TRUE)
nWeeks = max(allLines$week, na.rm = TRUE)
bestScores = data.frame(team = integer(), week = integer(), QB = integer(), RB1 = integer(), RB2 = integer(), WR1 = integer(), WR2 = integer(), TE = integer(), K = integer(), DEF = integer(), FLEX = integer(), TOTAL = integer())
weekScores = data.frame(team = integer(), week = integer(), opponent = integer(), Pts = integer(), OppPts = integer(), ifW = integer(), ifL = integer(), ifT = integer())
for (i in 1:nTeams)
{
for (j in 1:nWeeks)
{
oppid = allLines[allLines$team == i & allLines$week == j,][1,]$OppId
weekScores = rbind(weekScores, data.frame(team = i, week = j, opponent = allLines[allLines$team == i & allLines$week == j,][1,]$OppId,Pts = sum(allLines[allLines$team == i & allLines$week == j & allLines$Pos != "BN" & allLines$Pos != "IR",]$Pts, na.rm = TRUE),OppPts = sum(allLines[allLines$team == oppid & allLines$week == j & allLines$Pos != "BN" & allLines$Pos != "IR",]$Pts, na.rm = TRUE)))
}
}
weekScores$BestScore = 0
weekScores$OppBestScore = 0
for (i in 1:nTeams)
{
for (j in 1:nWeeks)
{
weekRoster = subset(allLines, allLines$team == i & allLines$week == j)
QB = sort(subset(weekRoster, weekRoster$NFLPos == "QB")$Pts,decreasing = TRUE)[1]
RB1 = sort(subset(weekRoster, weekRoster$NFLPos == "RB")$Pts,decreasing = TRUE)[1]
RB2 = sort(subset(weekRoster, weekRoster$NFLPos == "RB")$Pts,decreasing = TRUE)[2]
WR1 = sort(subset(weekRoster, weekRoster$NFLPos == "WR")$Pts,decreasing = TRUE)[1]
WR2 = sort(subset(weekRoster, weekRoster$NFLPos == "WR")$Pts,decreasing = TRUE)[2]
TE = sort(subset(weekRoster, weekRoster$NFLPos == "TE")$Pts,decreasing = TRUE)[1]
K = sort(subset(weekRoster, weekRoster$NFLPos == "K")$Pts,decreasing = TRUE)[1]
DEF = sort(subset(weekRoster, weekRoster$NFLPos == "D/ST")$Pts,decreasing = TRUE)[1]
FLEX = max(sort(subset(weekRoster, weekRoster$NFLPos == "WR")$Pts,decreasing = TRUE)[3],
sort(subset(weekRoster, weekRoster$NFLPos == "RB")$Pts,decreasing = TRUE)[3],
sort(subset(weekRoster, weekRoster$NFLPos == "TE")$Pts,decreasing = TRUE)[2], na.rm=TRUE)
TOTAL = sum(QB, RB1, RB2, WR1, WR2, TE, K, DEF, FLEX)
bestScore = cbind(team = i, week = j,QB, RB1, RB2, WR1, WR2, TE, K, DEF, FLEX,TOTAL)
bestScores = rbind(bestScores, bestScore)
weekScores[weekScores$opponent == i & weekScores$week == j,][1,]$OppBestScore = TOTAL
weekScores[weekScores$team == i & weekScores$week == j,][1,]$BestScore = TOTAL
}
}
weekScores$ifW = 0
weekScores$ifL = 0
weekScores$ifT = 0
weekScores$pwrW = 0
weekScores$pwrL = 0
weekScores$pwrT = 0
weekScores$Str = 0
for (i in 1:nTeams)
{
for (j in 1:nWeeks)
{
otherScores = subset(weekScores, weekScores$team != i & weekScores$week == j)
allScores = subset(weekScores, weekScores$week == j)
mymed = median(allScores$Pts)
mystddev = sd(allScores$Pts)
myscore = subset(weekScores, team == i & week == j)$Pts
myStr = (myscore - mymed) / mystddev
ifW = nrow(subset(otherScores, otherScores$Pts < myscore))
ifL = nrow(subset(otherScores, otherScores$Pts > myscore))
ifT = nrow(subset(otherScores, otherScores$Pts == myscore))
weekScores[weekScores$team == i & weekScores$week == j,][1,]$ifW = ifW
weekScores[weekScores$team == i & weekScores$week == j,][1,]$ifL = ifL
weekScores[weekScores$team == i & weekScores$week == j,][1,]$ifT = ifT
weight = 1 + 3 * (j - 1) / (nWeeks - 1)
pwrW = weight * ifW
pwrL = weight * ifL
pwrT = weight * ifT
weekScores[weekScores$team == i & weekScores$week == j,][1,]$pwrW = pwrW
weekScores[weekScores$team == i & weekScores$week == j,][1,]$pwrL = pwrL
weekScores[weekScores$team == i & weekScores$week == j,][1,]$pwrT = pwrT
weekScores[weekScores$team == i & weekScores$week == j,][1,]$Str = weight * myStr
}
}
weekScores$W = 0
weekScores[weekScores$Pts > weekScores$OppPts,]$W = 1
weekScores$L = 0
weekScores[weekScores$Pts < weekScores$OppPts,]$L = 1
weekScores$T = 0
weekScores[weekScores$Pts == weekScores$OppPts,]$T = 1
weekScores$BSW = 0
weekScores[weekScores$BestScore > weekScores$OppBestScore,]$BSW = 1
weekScores$BSL = 0
weekScores[weekScores$BestScore < weekScores$OppBestScore,]$BSL = 1
weekScores$BST = 0
weekScores[weekScores$BestScore == weekScores$OppBestScore,]$BST = 1
weekcalc = aggregate(x = weekScores, list(weekScores$team),sum)
weekcalc$team = weekcalc$team / nWeeks
weekcalc$PotentialCaptured = weekcalc$Pts/weekcalc$BestScore
ranks = sqldf("SELECT team, sum(Pts) Pts, sum(W) Wins, sum(L) Losses, sum(T) Ties, sum(BSW) BSW, sum(BSL) BSL, sum(BST)BST, sum(BestScore) Best FROM weekScores GROUP BY team")
ranks$score = ranks$Pts * (ranks$Wins / (ranks$Wins + ranks$Losses)) + ranks$Pts
ranks$teamName = teams[match(ranks$team, teams$id),]$team
r = ranks[,c(11,10,3,4,5,6,7,8,9,2,1)]
r[order(-r$score),]
plot(weekcalc$Best ~ weekcalc$Pts)
text(weekcalc$Pts+2, weekcalc$Best, weekcalc$team)
lines(c(min(r$Pts),max(r$Pts)),c(min(r$Best),max(r$Best)))
ifsAndButs = sqldf("SELECT team, sum(ifW) ifW, sum(ifL) ifL, sum(ifT) ifT, sum(pwrW) pwrW, sum(pwrL) pwrL, sum(pwrT) pwrT, sum(Str) Str FROM weekScores GROUP BY team")
ifsAndButs$team = teams[match(ifsAndButs$team, teams$id),]$team
ifsAndButs$Pct =    (ifsAndButs$ifW  + (ifsAndButs$ifT / 2))/  (ifsAndButs$ifW +  ifsAndButs$ifL +  ifsAndButs$ifT)
ifsAndButs$PwrPct = (ifsAndButs$pwrW + (ifsAndButs$pwrT / 2))/ (ifsAndButs$pwrW + ifsAndButs$pwrL + ifsAndButs$pwrT)
ifsAndButs[order(-ifsAndButs$Str),]
write.csv(ifsAndButs[order(-ifsAndButs$PwrPct),],"rankings.csv")
allLines = data.frame(week = integer(), team = integer(), Pos = character(), Player = character(), Pts = character(), Bye = integer());
RSelenium::checkForServer()
RSelenium::startServer()
remDr <- remoteDriver()
waitFor(3)
remDr$open()
remDr$navigate(loginURL)
remDr$switchToFrame("disneyid-iframe")
in1 = remDr$findElement("xpath","//input[@placeholder = 'Username or Email Address']")
in1$sendKeysToElement(list(user))
in2 = remDr$findElement("xpath","//input[@placeholder = 'Password (case sensitive)']")
in2$sendKeysToElement(list(pass))
btn = remDr$findElement("xpath","//button[@type = 'submit']")
btn$clickElement()
startFresh = FALSE
allLines = data.frame(week = integer(), team = integer(), Pos = character(), Player = character(), Pts = character(), Bye = integer());
if (startFresh == TRUE){
startAt = 1;
} else {
prevAllLines = read.csv("allLines.csv")
startAt = max(prevAllLines$week, na.rm = TRUE) + 1;
}
startAt
allLines
prevAllLines
max(prevAllLines$week)
for (i in 1:nteams){
for(j in startAt:nweeks)
{
dataURL <- paste0("http://games.espn.go.com/ffl/boxscorefull?leagueId=545778&teamId=",i,"&scoringPeriodId=",j,"&seasonId=",year,"&view=scoringperiod&version=full")
remDr$navigate(dataURL)
# YOU can get the page source for example
pageSrc <- remDr$getPageSource()[[1]]
tables = readHTMLTable(pageSrc)
myscore = tables[[2]]
kscore = tables[[3]]
dscore = tables[[4]]
bench = tables[[5]]
ptsCol = 24
if (year < 2015)
{
ptsCol = 22
}
kPtsCol = ptsCol - 12
dPtsCol = ptsCol - 10
QB = data.frame(myscore[4,1],myscore[4,2], myscore[4,ptsCol])
RB1 = data.frame(myscore[5,1],myscore[5,2], myscore[5,ptsCol])
RB2 = data.frame(myscore[6,1],myscore[6,2], myscore[6,ptsCol])
WR1 = data.frame(myscore[7,1],myscore[7,2], myscore[7,ptsCol])
WR2 = data.frame(myscore[8,1],myscore[8,2], myscore[8,ptsCol])
TE  = data.frame(myscore[9,1],myscore[9,2], myscore[9,ptsCol])
FLEX  = data.frame(myscore[10,1],myscore[10,2], myscore[10,ptsCol])
K = data.frame(kscore[3,1],kscore[3,2],kscore[3,kPtsCol])
DEF = data.frame(dscore[3,1], gsub("\\sD/ST\\sD/ST","",dscore[3,2]),dscore[3,dPtsCol])
IR = subset(bench, bench$V1 == "IR")
bench=subset(bench, bench$V1 == "Bench")
BN = data.frame(Pos = character(), Player = character(), Pts = character(), Bye = integer(), stringsAsFactors = FALSE)
if (year > 2014)
{
for (k in 1:nrow(bench))
{
BN = rbind(BN,data.frame(Pos = "BN",Player = as.character(bench[k,2]),Pts = as.character(bench[k,ptsCol]), stringsAsFactors = FALSE))
}
if (tables[[6]][1,1] == "BENCH: KICKERS")
{
KBench = tables[[6]]
KBench = subset(KBench, KBench$V1 == "Bench")
if (nrow(KBench) > 0)
{
for (k in 1:nrow(KBench))
{
BN = rbind(BN, data.frame(Pos = "BN", Player = KBench[k,2], Pts = ifelse(is.na(KBench[k,kPtsCol]),0,as.character(KBench[k,kPtsCol])), stringsAsFactors = FALSE))
}
}
DefBench = tables[[7]]
DefBench = subset(DefBench, DefBench$V1 == "Bench")
if (nrow(DefBench) > 0)
{
for (k in 1:nrow(DefBench))
{
BN = rbind(BN,data.frame(Pos = "BN",Player = gsub("\\sD/ST\\sD/ST","",DefBench[k,2]), Pts = ifelse(is.na(DefBench[k,dPtsCol]),0,as.character(DefBench[k,dPtsCol]))))
}
}
}else {
KBench = NULL
DefBench = tables[[6]]
DefBench = subset(DefBench, DefBench$V1 == "Bench")
if (nrow(DefBench) > 0)
{
for (k in 1:nrow(DefBench))
{
BN = rbind(BN,data.frame(Pos = "BN",Player = gsub("\\sD/ST\\sD/ST","",DefBench[k,2]), Pts = ifelse(is.na(DefBench[k,14]),0,DefBench[k,14])))
}
}
}
}
if (!is.na(IR[1,2]))
{
IR = data.frame(Pos = "IR",Player = IR[1,2],Pts = IR[1,ptsCol - 1])
} else {
IR = NULL;
}
colnames(QB)= c("Pos","Player","Pts")
colnames(RB1)= c("Pos","Player","Pts")
colnames(RB2)= c("Pos","Player","Pts")
colnames(WR1)= c("Pos","Player","Pts")
colnames(WR2)= c("Pos","Player","Pts")
colnames(TE)= c("Pos","Player","Pts")
colnames(FLEX)= c("Pos","Player","Pts")
colnames(K)=c("Pos","Player","Pts")
colnames(DEF)= c("Pos","Player","Pts")
#colnames(IR)= c("Pos","Player","Pts")
lines = rbind(QB,RB1,RB2,WR1,WR2,TE,FLEX,K,DEF,BN,IR)
lines$Player = gsub("([^a-zA-Z0-9\\s\\.,'/])"," ",lines$Player)
lines$Pts = as.numeric(as.character(lines$Pts))
lines$Bye = 0
if (nrow(lines[is.na(lines$Pts),]) > 0)
{
lines[is.na(lines$Pts),]$Bye = 1
lines[is.na(lines$Pts),]$Pts = 0
}
lines$week = j
lines$team = i
if (year == 2015)
{
if ((tables[[6]][1,1] == "BENCH: TEAM D/ST") | (tables[[6]][1,1] == "BENCH: KICKERS"))
{
lines$Opponent = gsub(" Box Score","",tables[[7]][1,1])
}else {
lines$Opponent = gsub(" Box Score","",tables[[6]][1,1])
}
}
else
{
if ((tables[[5]][1,1] == "BENCH: TEAM D/ST") | (tables[[5]][1,1] == "BENCH: KICKERS"))
{
lines$Opponent = gsub(" Box Score","",tables[[6]][1,1])
}else {
lines$Opponent = gsub(" Box Score","",tables[[5]][1,1])
}
}
allLines = rbind(allLines, lines)
}
}
db = allLines
allLines$Player = gsub("\\s*$","",allLines$Player)
allLines$Player = gsub("Ã,Â","",allLines$Player)
allLines$Player = gsub("Ã,Â","",allLines$Player)
allLines$OppId = match(allLines$Opponent,teams$team)
allLines$Player = gsub("\\sD/ST","",allLines$Player)
allLines$NFLTeam = gsub("(.*), *(.*)","\\2",allLines$Player)
allLines$Player = gsub("(.*), *(.*)","\\1",allLines$Player)
allLines$Player = gsub("\\*$","",allLines$Player)
allLines$Player = gsub("\\s*$","",allLines$Player)
allLines$NFLTeam = gsub("\\s*(([QPDO])|(SSPD))$","",allLines$NFLTeam)
allLines$NFLPos = gsub("\\s+IR$","",allLines$NFLTeam)
allLines$NFLPos = gsub("^(.*)\\s+(.*)$","\\2",allLines$NFLPos)
allLines$NFLTeam = gsub("^(.*)\\s+(.*)$","\\1",allLines$NFLTeam)
allLines$NFLTeam = gsub("\\s*$","",allLines$NFLTeam)
allLines[!is.na(match(allLines$NFLTeam, nfltms$TeamName)),]$NFLPos = "D/ST"
allLines[!is.na(match(allLines$NFLTeam, nfltms$TeamName)),]$NFLTeam = as.character(nfltms[match(allLines[!is.na(match(allLines$NFLTeam,nfltms$TeamName)),]$NFLTeam,nfltms$TeamName),]$ID)
if (startFresh == FALSE)
{
prevAllLines$X = NULL
allLines = rbind(prevAllLines, allLines)
}
#allLines$Opponent = NULL
write.csv(allLines, file="allLines.csv")
setwd("C:/Users/Charles.Willwerth/OneDrive for Business/GitHubChuckWillwerth/ESPNFFLScraper")
allLines = read.csv("allLines.csv")
teams = read.csv("fteams.csv")
library(sqldf)
nTeams = max(allLines$team, na.rm = TRUE)
nWeeks = max(allLines$week, na.rm = TRUE)
bestScores = data.frame(team = integer(), week = integer(), QB = integer(), RB1 = integer(), RB2 = integer(), WR1 = integer(), WR2 = integer(), TE = integer(), K = integer(), DEF = integer(), FLEX = integer(), TOTAL = integer())
weekScores = data.frame(team = integer(), week = integer(), opponent = integer(), Pts = integer(), OppPts = integer(), ifW = integer(), ifL = integer(), ifT = integer())
for (i in 1:nTeams)
{
for (j in 1:nWeeks)
{
oppid = allLines[allLines$team == i & allLines$week == j,][1,]$OppId
weekScores = rbind(weekScores, data.frame(team = i, week = j, opponent = allLines[allLines$team == i & allLines$week == j,][1,]$OppId,Pts = sum(allLines[allLines$team == i & allLines$week == j & allLines$Pos != "BN" & allLines$Pos != "IR",]$Pts, na.rm = TRUE),OppPts = sum(allLines[allLines$team == oppid & allLines$week == j & allLines$Pos != "BN" & allLines$Pos != "IR",]$Pts, na.rm = TRUE)))
}
}
weekScores$BestScore = 0
weekScores$OppBestScore = 0
for (i in 1:nTeams)
{
for (j in 1:nWeeks)
{
weekRoster = subset(allLines, allLines$team == i & allLines$week == j)
QB = sort(subset(weekRoster, weekRoster$NFLPos == "QB")$Pts,decreasing = TRUE)[1]
RB1 = sort(subset(weekRoster, weekRoster$NFLPos == "RB")$Pts,decreasing = TRUE)[1]
RB2 = sort(subset(weekRoster, weekRoster$NFLPos == "RB")$Pts,decreasing = TRUE)[2]
WR1 = sort(subset(weekRoster, weekRoster$NFLPos == "WR")$Pts,decreasing = TRUE)[1]
WR2 = sort(subset(weekRoster, weekRoster$NFLPos == "WR")$Pts,decreasing = TRUE)[2]
TE = sort(subset(weekRoster, weekRoster$NFLPos == "TE")$Pts,decreasing = TRUE)[1]
K = sort(subset(weekRoster, weekRoster$NFLPos == "K")$Pts,decreasing = TRUE)[1]
DEF = sort(subset(weekRoster, weekRoster$NFLPos == "D/ST")$Pts,decreasing = TRUE)[1]
FLEX = max(sort(subset(weekRoster, weekRoster$NFLPos == "WR")$Pts,decreasing = TRUE)[3],
sort(subset(weekRoster, weekRoster$NFLPos == "RB")$Pts,decreasing = TRUE)[3],
sort(subset(weekRoster, weekRoster$NFLPos == "TE")$Pts,decreasing = TRUE)[2], na.rm=TRUE)
TOTAL = sum(QB, RB1, RB2, WR1, WR2, TE, K, DEF, FLEX)
bestScore = cbind(team = i, week = j,QB, RB1, RB2, WR1, WR2, TE, K, DEF, FLEX,TOTAL)
bestScores = rbind(bestScores, bestScore)
weekScores[weekScores$opponent == i & weekScores$week == j,][1,]$OppBestScore = TOTAL
weekScores[weekScores$team == i & weekScores$week == j,][1,]$BestScore = TOTAL
}
}
weekScores$ifW = 0
weekScores$ifL = 0
weekScores$ifT = 0
weekScores$pwrW = 0
weekScores$pwrL = 0
weekScores$pwrT = 0
weekScores$Str = 0
for (i in 1:nTeams)
{
for (j in 1:nWeeks)
{
otherScores = subset(weekScores, weekScores$team != i & weekScores$week == j)
allScores = subset(weekScores, weekScores$week == j)
mymed = median(allScores$Pts)
mystddev = sd(allScores$Pts)
myscore = subset(weekScores, team == i & week == j)$Pts
myStr = (myscore - mymed) / mystddev
ifW = nrow(subset(otherScores, otherScores$Pts < myscore))
ifL = nrow(subset(otherScores, otherScores$Pts > myscore))
ifT = nrow(subset(otherScores, otherScores$Pts == myscore))
weekScores[weekScores$team == i & weekScores$week == j,][1,]$ifW = ifW
weekScores[weekScores$team == i & weekScores$week == j,][1,]$ifL = ifL
weekScores[weekScores$team == i & weekScores$week == j,][1,]$ifT = ifT
weight = 1 + 3 * (j - 1) / (nWeeks - 1)
pwrW = weight * ifW
pwrL = weight * ifL
pwrT = weight * ifT
weekScores[weekScores$team == i & weekScores$week == j,][1,]$pwrW = pwrW
weekScores[weekScores$team == i & weekScores$week == j,][1,]$pwrL = pwrL
weekScores[weekScores$team == i & weekScores$week == j,][1,]$pwrT = pwrT
weekScores[weekScores$team == i & weekScores$week == j,][1,]$Str = weight * myStr
}
}
weekScores$W = 0
weekScores[weekScores$Pts > weekScores$OppPts,]$W = 1
weekScores$L = 0
weekScores[weekScores$Pts < weekScores$OppPts,]$L = 1
weekScores$T = 0
weekScores[weekScores$Pts == weekScores$OppPts,]$T = 1
weekScores$BSW = 0
weekScores[weekScores$BestScore > weekScores$OppBestScore,]$BSW = 1
weekScores$BSL = 0
weekScores[weekScores$BestScore < weekScores$OppBestScore,]$BSL = 1
weekScores$BST = 0
weekScores[weekScores$BestScore == weekScores$OppBestScore,]$BST = 1
weekcalc = aggregate(x = weekScores, list(weekScores$team),sum)
weekcalc$team = weekcalc$team / nWeeks
weekcalc$PotentialCaptured = weekcalc$Pts/weekcalc$BestScore
ranks = sqldf("SELECT team, sum(Pts) Pts, sum(W) Wins, sum(L) Losses, sum(T) Ties, sum(BSW) BSW, sum(BSL) BSL, sum(BST)BST, sum(BestScore) Best FROM weekScores GROUP BY team")
ranks$score = ranks$Pts * (ranks$Wins / (ranks$Wins + ranks$Losses)) + ranks$Pts
ranks$teamName = teams[match(ranks$team, teams$id),]$team
r = ranks[,c(11,10,3,4,5,6,7,8,9,2,1)]
r[order(-r$score),]
plot(weekcalc$Best ~ weekcalc$Pts)
text(weekcalc$Pts+2, weekcalc$Best, weekcalc$team)
lines(c(min(r$Pts),max(r$Pts)),c(min(r$Best),max(r$Best)))
ifsAndButs = sqldf("SELECT team, sum(ifW) ifW, sum(ifL) ifL, sum(ifT) ifT, sum(pwrW) pwrW, sum(pwrL) pwrL, sum(pwrT) pwrT, sum(Str) Str FROM weekScores GROUP BY team")
ifsAndButs$team = teams[match(ifsAndButs$team, teams$id),]$team
ifsAndButs$Pct =    (ifsAndButs$ifW  + (ifsAndButs$ifT / 2))/  (ifsAndButs$ifW +  ifsAndButs$ifL +  ifsAndButs$ifT)
ifsAndButs$PwrPct = (ifsAndButs$pwrW + (ifsAndButs$pwrT / 2))/ (ifsAndButs$pwrW + ifsAndButs$pwrL + ifsAndButs$pwrT)
ifsAndButs[order(-ifsAndButs$Str),]
write.csv(ifsAndButs[order(-ifsAndButs$PwrPct),],"rankings.csv")
subset(weekScores, weekScores$week == 11)
weekScores$team = teams[match(weekScores$team, teams$id),]$team
subset(weekScores, weekScores$week == 11)
subset(weekScores, weekScores$week == 10)
